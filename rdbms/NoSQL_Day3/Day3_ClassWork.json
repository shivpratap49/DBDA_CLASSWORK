 # find all employees who are working in 
    dept 30 or getting salary > 1300
    # select * from emp where deptno = 30 or sal > 1300
    > db.emp.find({
      $or:[
        { deptno: {$eq : 30} },
        { sal: {$gt : 1300} }
      ]
    }).count()



### mixing both selection and projection


# get department and salary of KING
# select deptno, sal from emp where ename = 'KING';

>db.emp.find({
    ename: { $eq : "KING" }
},{
  deptno:1,
  sal:1,
  _id:0
})


>db.emp.find({
    ename: "KING" 
},{
  deptno:1,
  sal:1,
  _id:0
})


# find the employee name who is getting the 
lowest salary in dept 30
# select ename from emp where deptno = 30 order by sal ASC limit 1
> db.emp.find({
  deptno:{ $eq : 30}
},{
  ename:1,
  _id:0
}). sort({sal:1}).limit(1)






# find the highest paying employee's name 
and salary who is working in dept 10
# select ename, sal from emp where deptno = 10 order by sal DESC limit 1

>db.emp.find({
  deptno:{ $eq : 10}
},{
  ename:1,
  sal:1,
  _id:0
}). sort({sal:-1}).limit(1)







-------------------------------------------------------------------
### exists



# find the employees where comm attribute exists
# exists means the attribute exists, it may contain null
> db.emp.find({comm:{$exists:true}})







# find the employees for whom the 
commission attribute is missing
>db.emp.find({comm:{$exists:false}})







# find the employee name and comm who are 
getting valid (not null) commission
>db.emp.find({
  $and:[
        { comm:{ $exists : true}},
        { comm:{ $ne : null}}
  ]},
  {
    ename:1,
    comm:1,
    _id:0
  })







# find all employees name and comm who are getting 
some commission (> 0)
>db.emp.find({
  $and:[
        { comm: { $exists : true }},
        { comm: { $ne : null }},
        { comm: { $gt : 0 }}
  ]},
  {
    ename:1,
    comm:1,
    _id:0
  })







### regular expression
- one of the pattern matching technique
- used to search/find a value matching required pattern
- the regular expressions are used across the languages (language neutral)
- used for text processing and data cleansing
- case sensitive
- wild character /   /
  - $: ending with
  - ^: starting with
  - .: any single character
  - []: one character from list of characters
  - *: zero or more
  - +: one or more
  - ?: zero or one


# find all the employees having name ending with R
>db.emp.find({
    ename:/R$/
},{
    ename:1,
    _id:0
})





# find all the employees having name 
starting with A
>
db.emp.find({
    ename:/^A/
},{
    ename:1,
    _id:0
})



# find the employees having 'A' in their names
>db.emp.find({
    ename:/A/
},{
    ename:1,
    _id:0
})







# find the employees having 'A' multiple times
>db.emp.find({
    ename:/.*A.*A.*/
},{
    ename:1,
    _id:0
})
# find the employees having 'A' and 'E' characters
>db.emp.find({
    ename:/.*A.*E.*/
},{
    ename:1,
    _id:0
})



# find employee having name 'JAMES'
>db.emp.find({ ename:'JAMES' },{ ename:1, _id:0})

>db.emp.find({ename : {$eq : 'JAMES'}},{ename : 1,_id : 0})

>db.emp.find({ename:/JAMES/},{ename:1,_id:0})

>db.emp.find({ ename :{ $regex : /JAMES/ }},{ ename : 1,_id : 0})





# exact match
# find employee having name 'James'
>db.emp.find({ename:/James/i},{ename:1,_id:0})




==============================================
## Delete Records
// delete a document where deptno=30. 
[if many recored are matching still delete one]

>db.emp.deleteOne({deptno:30})

>db.emp.find({},{ename:1,deptno:1,_id:0}).count()




// delete all documents where deptno=30
>db.emp.deleteMany({deptno:30})
db.emp.find({},{ename:1,deptno:1,_id:0}).count()





>db.emp.find({},{ename:1,deptno:1,_id:0})



// delete all documents who has comm field.
>db.emp.deleteMany({comm:{$exists:true}})








// delete all documents

>db.emp.deleteMany({})

=================================================================
### update / upsert / modify

- the document exists and you are suppose to update it
- update() will update the entire object
- update() will add the attribute/property if it does not exist
- syntax
  - update(<criteria>, <newValues>, <upsert>, <multiple>)
  - where
    - criteria: used to select the matching document(s)
    - newValues: new values you want to update the document with
    - upsert:
      - used to insert a new document if it does not exist
      - if the document exists, update it but if it does not exist then create new document
      - by default, it is set to false
    - multiple:
      - used to update the multiple documents
      - by default, it is set to false



# insert some data
db.contacts.insert({name: 'contact1', email: 'c1@test.com'})
db.contacts.insert({name: 'contact2', phone: '1236548'})
db.contacts.insert({name: 'contact3', email: 'c1@teset.com', phone: '1656454'})
db.contacts.insert({name: 'contact4', address: 'pune'})

db.contacts.find()







# update the existing contact1 with
 new values xyz@gmail.com  (first copy the id of contact 1)
  "_id" : ObjectId("674e84178f8fcc57f1efa78d")
>db.contacts.update({name:'contact1'},{email:'xyz@gmail.com'})

>db.contacts.update({
  "_id" : ObjectId("674e84178f8fcc57f1efa78d")
  },{
    name : 'contact1', email : 'xyz@gmail.com'
  })






$set
# add the properties to existing object as email
contact2=> pqr@gmail.com

> db.contacts.update({
  name : 'contact2'
  },{
    $set:{email:"pqr@gmail.com"}
  })






# update contact1 with phone=989889888
# $set is used to add/update only the required 
attributes
>db.contacts.update({
  name : 'contact1'
  },{
    $set:{phone:"989889888"}
  })







# update contact4 with email address =contact4@test.com
>









# update contact5 with email address = contact5@test.com
>db.contacts.update({
  name : 'contact5'
  },{
    $set:{email:"contact5@test.com"}
  },true)

  >db.contacts.update({
  name : 'contact5'
  },{
    $set:{email:"contact5@test.com"}
  },{upsert:true})






# since there is no contact with name contact5, 
nothing will get updated/inserted
>



# update contact5 with email address if exists or create new contact otherwise
# since the third parameter is set to true (upsert), it will create a new record if it does not find any existing one matching with the pattern

>



# update all contacts with address = 'pune'
>db.contacts.update({},{$set:{address : 'pune'}},false,true)









# param1: select all ({})
# param2: updated values ({$set: {address: 'pune'}})
# param3: no upsert (false)
# param4: update multiple documents (true)



# update all contacts with zipcode = 411041
>db.contacts.update({},{$set:{zipcode:'411041'}},false,true)







# update all contacts with state = MH and country = india
>db.contacts.updateMany({},{$set:{state:'MH', country:'india'}})








==========================
on students dataset
## array operations

#### find out the students having hobbies 
(find the students where the hobbies is an array )

# find the students with hobbies as an array
# $type will check if the data type of collection
 matches with required type
>db.students.find({hobbies:{$type:'array'}})







# find the student who are having hobbies length = 2  =$size
>db.students.find({hobbies:{$size :2}})
>db.students.find({hobbies:{$size :2}},{name:1,hobbies:1,_id:0})








//https://www.mongodb.com/docs/v5.0/reference/operator/query/elemMatch/
#### find out the students who has the 
programming as one of the hobbies --->$elemMatch

>db.students.find({
  hobbies:{
    $elemMatch:{ $eq:"Programming"}
  }
  },{
    name:1,hobbies:1,_id:0
  })






#### find all student who passed 12th 
standard in year 2006 
$elemMatch  , $and
>
db.students.find({
  academics : {
    $elemMatch : {
      $and : [
        { std : '12th' },
        { passing  : 2006 }
      ]
    }
  }
  },{
    name:1,hobbies:1,_id:0
  })








#### find all the students having score 
less than 80% in 10th exam
>db.students.find({
  academics : {
    $elemMatch : {
      $and : [
        { std : '10th' },
        { marks : { $lt : 80 } }
      ]
    }
  }
  },{
    name:1,hobbies:1,_id:0
  })


#### find all the students having hobby as Sports 
and Music
> 
db.students.find({
  $and:[
    { hobbies : { $elemMatch: {$eq : "Sports"} } },
    { hobbies : { $elemMatch: {$eq : "Music"} } }
  ]
  },{
    name:1,hobbies:1,_id:0
  })

###($and -> $all)

using $all
> db.students.find({
   hobbies:{$all:["Sports","Music"]}
},{
    name:1,hobbies:1,_id:0
  })







###($or -> $in)
#### find all the students who like to Teach 
or listen to Music
using $in
> 

db.students.find({
   hobbies:{$in:["Teaching","Music"]}
},{
    name:1,hobbies:1,_id:0
  })





#### find all students who do not like programming

$nin

>db.students.find({
   hobbies:{$nin:["Programming"]}
},{
    name:1,hobbies:1,_id:0
  })



#### display the students for whom 
Music is the 1th hobby -> 0th index
>
db.students.find({
   'hobbies.0' : { $eq : "Music" }
},{
    name:1,hobbies:1,_id:0
  })



#### display the students for whom 
Sports is the 2nd hobby => 1st index
>





-->### display a students information

# returns a single document
> db.students.findOne({_id:3})

================================================
Array Update Operators

db.students.find();

###update Sachin hobbies list and 
add Cooking  $push

>db.students.update({
  name:'Sachin'
},{
  $push :{hobbies:"Cooking"}
})




db.students.findOne({name:'Sachin'});

###update Sachin hobbies list and add Singing
>
db.students.update({
  name:'Sachin'
},{
  $push :{hobbies:"Singing"}
})





db.students.findOne({name:'Sachin'});

### update Sachin hobbies list
 by adding Programming (allow duplicate)
>db.students.update({
  name:'Sachin'
},{
  $push :{hobbies:"Programming"}
})

db.students.findOne({name:'Sachin'});


### update Sachin hobbies list by adding Singing 
using $addToSet-->(not allow duplicate)
>
db.students.update({
  name:'Sachin'
},{
  $addToSet :{hobbies:"Singing"}
})



